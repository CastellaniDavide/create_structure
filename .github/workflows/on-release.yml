name: Action on every release

on:
  create:
    tags:
      - v*

jobs:
  test-and-publish:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    - name: Build and publish
      env:
        STACKMANAGER_VERSION: ${{ github.event.release.tag_name }}
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/* --verbose
    - name: Test installation
      run: |
        pip install createstructure

  pypi-install-test:
    needs: test-and-publish
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name:  Install
      run: |
          pip3.8 install createstructure
          
  test-ubuntu-debian-manual:
    needs: test-and-publish
    runs-on: ubuntu-latest
    steps:
    - name: Installation & execution
      run: |
        sudo apt install git python3 python3-pip python-setuptools
        cd ~
        git clone https://github.com/CastellaniDavide/create_structure.git
        cd create_structure
        git pull --force
        pip3 install setuptools
        pip3 install -r requirements/requirements.txt
        alias create_structure="python3 ~/create_structure/bin/create_structure.py -t=${{ secrets.REPO_TOKEN }} -o=CastellaniDavideTest"
        
  test-windows-manual:
    needs: test-and-publish
    runs-on: windows-latest
    steps:
    - name: Installation
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        choco install git.install -y
        choco install python3 --pre -y
        cd "C:\Program Files"
        git clone https://github.com/CastellaniDavide/create_structure.git
        cd create_structure
        git pull --force
        pip3 install -r requirements/requirements.txt
        New-Item -Path $Profile -Type File -Force
        echo "Function CreateStructureFunction {python 'C:\Program Files/create_structure/bin/create_structure.py' -t=${{ secrets.REPO_TOKEN }} -o=CastellaniDavideTest'}" > $Profile
        echo "Set-Alias -Name create_structure -Value CreateStructureFunction" >> $Profile

#   test-linux-packages:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v1
#       - name: Install dependences
#         run: |
#           sudo add-apt-repository ppa:jyrki-pulliainen/dh-virtualenv
#           sudo apt-get update
#           sudo apt-get install build-essential debhelper devscripts equivs dh-virtualenv python3.8
      
#       - name: Set envirorment varible(s)
#         run: echo "::set-output name=VERSION::$(echo ${{ github.event.release.tag_name }} | sed 's/v//')"
#         id: envirorment-variables

#       - name: Create Debian package
#         run: |
#           cd debian
#           debuild -us -uc --lintian-opts --profile debian
          
#       - name: Install package
#         run: sudo dpkg -i ./createstructure_7.0_amd64.deb
        
#   upload-linux-packages:
#     needs: test-linux-packages
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v1
#       - name: Install all dependences
#         run: |
#           sudo add-apt-repository ppa:jyrki-pulliainen/dh-virtualenv
#           sudo apt-get update
#           sudo apt-get install build-essential debhelper devscripts equivs dh-virtualenv python3.8 gnupg gnupg2

#           sudo add-apt-repository ppa:jyrki-pulliainen/dh-virtualenv -y && sudo apt-get update -y && sudo apt-get install build-essential debhelper devscripts equivs dh-virtualenv python3.8 gnupg gnupg2 -y

#       - name: Create Debian package
#         run: |
#           tar -czvf createstructure_7.0.orig.tar.gz debian/
#           cd ./debian/
#           sudo debuild -S -sa

#       - name: debsign
#         run: |
#           echo ${{ secrets.GPG_KEY }} > key.txt
#           LC_ALL=C tr -cd 0-9a-fA-F < key.txt | xxd -r -p > key.gpg
#           gpg --import < key.gpg
#           debsign -k ${{ secrets.GPG_IDENTIFICATOR }} createstructure_7.0_source.changes
      
#       - name: push to ppa
#         run: |
#           dput -f ppa:castellanidavide/createstructure createstructure_7.0_source.changes
       
#       - name: Set envirorment varible(s)
#         run: |
#           echo "::set-output name=PUSH_PATH::$(curl -sL https://api.github.com/repos/CastellaniDavide/create_structure/releases/latest | jq -r '.upload_url')"
#         id: envirorment-variables
              
#       - name: Upload .tar.xz
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.envirorment-variables.outputs.PUSH_PATH }}"
#           asset_path: ./createstructure_7.0.debian.tar.xz
#           asset_name: createstructure_7.0.tar.xz
#           asset_content_type: application/zip

  test-choco:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: oprypin/find-latest-tag@v1
      with:
        repository: CastellaniDavide/create_structure
        releases-only: true 
      id : latest

    - name: Set envirorment varible(s)
      run: |
        echo "::set-output name=PUSH_PATH::$(curl -sL https://api.github.com/repos/CastellaniDavide/create_structure/releases/latest | jq -r '.upload_url')"  
        echo "::set-output name=VERSION_TAG::$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')"
        echo "::set-output name=TAR_FILE::createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').orig.tar.gz"
        echo "::set-output name=DEB_FILE::createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_amd64.deb"
        echo "::set-output name=CHANGES_FILE::createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_source.changes"
        echo "::set-output name=NUPKG_FILE::createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
        echo "::set-output name=NUPKG_FILE_PATH::./choco/createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
      id: envirorment-variables
    - name: Try to build
      run: |
        cd choco 
        choco pack
        choco install createstructure -d-v -s . --pre -y --force

  publish-choco:
    needs: test-choco
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: oprypin/find-latest-tag@v1
      with:
        repository: CastellaniDavide/create_structure
        releases-only: true 
      id : latest
    - name: Set envirorment varible(s)
      run: |
        echo "::set-output name=PUSH_PATH::$(curl -sL https://api.github.com/repos/CastellaniDavide/create_structure/releases/latest | jq -r '.upload_url')"  
        echo "::set-output name=VERSION_TAG::$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')"
        echo "::set-output name=TAR_FILE::createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').orig.tar.gz"
        echo "::set-output name=DEB_FILE::createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_amd64.deb"
        echo "::set-output name=CHANGES_FILE::createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_source.changes"
        echo "::set-output name=NUPKG_FILE::createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
        echo "::set-output name=NUPKG_FILE_PATH::./choco/createstructure_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
      id: envirorment-variables
    - name: Build & Pusblish
      run: |
        cd choco
        choco apikey --key ${{ secrets.CHOCO_APIKEY }} --source https://push.chocolatey.org/
        choco pack
        choco push .\${{ steps.envirorment-variables.outputs.NUPKG_FILE }} --source https://push.chocolatey.org/
        move ./* ../
    - name: Upload nupkg
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.envirorment-variables.outputs.PUSH_PATH }}
        asset_path: ${{ steps.envirorment-variables.outputs.NUPKG_FILE }}
        asset_name: ${{ steps.envirorment-variables.outputs.NUPKG_FILE }}
        asset_content_type: application/zip
